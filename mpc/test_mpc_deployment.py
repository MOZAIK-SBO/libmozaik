import os
import struct
import sys
from unittest.mock import MagicMock, patch

import numpy as np
from Crypto.Cipher import AES

from config import Config
from database import Database
from key_share import MpcPartyKeys, prepare_params_for_dist_enc
from rep3aes import Rep3AesConfig
from task_manager import TaskManager
from test import TestRep3Aes, exception_check
from test_task_manager import TestTaskManager

if __name__ == "__main__":
    config_index = int(sys.argv[1])

    if os.path.exists('test.db'):
        os.remove('test.db')

    db = Database('test.db')
    mock_app = MagicMock()

    aes_key = bytes.fromhex('0102030405060708090a0b0c0d0e0f10')
    key_shares = (bytes.fromhex('f006e3a4a7935cb8e49d3b1a0d0c4ec7'), bytes.fromhex('c0d74c17159c1172578c262c1f874496'), bytes.fromhex('31d3acb7b7094ac2ba1b163a1f850541'))
    encrypted_key_shares = (bytes.fromhex('4ddc9637e8af64a9cc42003f71c50be0151e945d53d191880de966210d2bee54a2d1233c2e6524ad49af606e1fd3f5c83dc3fa0d6115865709cb4cef70af1fec84d84f0880754320cdf6b81436f2918befe29da0dbe1eb28a9926404f195011557a432db24fd37d29e22cc108c05d7a2ad2972d52b3de542aed462d2a3e1528cd9650d78df32d13ef6f11c4a43a8f45c4ae37df3236ea6cbefb41df7304d0e61967fea4818c361cd65ade8f7db705eb53468f018ebf3754c9119baf0c3f5b25cdd3aff1bc6592a616987317f905481a5a71b90e3b76bc78a1a62af58733f352a3edfa6e21642b19f28ad578148ffb6deccab8ac2fb5cd283fc0fcb323b40cdd9'), bytes.fromhex('795cc08a9e0656950615ea84675fed334d26228f285a0b7b31fc64647dda5b8dac465d012aed9f1820cf357e16df4c4dbb10cb40e879530dac47df4e3f32c78b7463298c590628ec87b108e32fb01b6d299f5c0e3533e99b8674883f5fab9fdc675243dc430601595615c80d240ccd91ef3444ec3ff8e43aeb042d9cc63852367b4023f048203f8432d0b908e7ea2a9fdc58031bf30080a6702d67181de2a30f020e692aacbcd65201423421f346f4e6045dfc45d56817006176bc33a344ae33600e4dda31652434bff77a9e0c9a06e368ba2ee6cdb964cb5418c8464e3c2b0ab7f48c20e1e92ac6739b784010c75fcd5463372d72cf8790e16c3962ebd4af0e'), bytes.fromhex('aff208111d291419077fb42478fd9e015d8e446059f746fc01fa901ca7ce78c3cd8051b75d72568a02615422ed7ea19653ec7a737979555e2e32be6e78af0ac091186e4561c7a88ca069696a06faec8292335c60abbd85e3dd473d3fca41c4a55e948304ef04561ce0174042a105ac329d23da036b9059a5bd4fcb541055afddb78c6b62fe776b4cdcac1858db6affb00e764ff3c5253ecae1bb61bdf29b1f557086389f932dc13539c3e2ab08940b0bf19a3e3f4b4d55a12f936c7be0880b6e619bfc4088a3e414442668ca6b0e7e003dcb3e00fc8d45e2d4def2b1b2982d7c8789f458e386697b30506f9cdf2ac0a79b582b1cfcc1e4c2ea2f9c419dd9ce8e'))

    # encrypted key schedule shares of above aes_key
    ks_share1 = bytes.fromhex('a4fb9c355b96b3d27b100290cef41770b7a205d92096e718715c97c67e8cc8199d9b11baf8110df248e89749346ec82b9bd9a9f71cb8de4ec63db454f768986b683493997215807eb28f9e48b44700ac2a0d51db315f4d2df5af0b47103d6f62cb63260faf697cab3de40b7a0fb118d37f59441e4d5d742be4697ab8ff672bff7ae3326f505d314033180601ca6038610f8c5e0f7396c60861a1b32f2ab967a05f411632ce9bc800c53e9f28fd46d5325c21842ebb205756458d86c25d3c67d9aa5119401ddf0dc10a7dbb669ffb553ed1f5eba0b759710f8b518487fe073e225316809fe5ca6753df03ba3ca8fb69b93900f5ac3e60536b8302f26486dbf126')
    ks_share2 = bytes.fromhex('1c8682a6b64b7e9bc195be221441cc30fe6213e7fc2deff7413db7c52260d4698153ab8c681847fdc45f6fa41c0169fb66102b174fc677e4841ef40c4a4df175be76a5fe9dfdfce58a1606d176c0945359903684e8ba399f896e22866954e6e24b5b7c567a517fbbcfa806a67753805f6a97e3688875a53ea2e2b65449f986c899efbe566c4bfd36c2ee208172d88e24e4ac0b4158853d865780ad3a87e2141a8d637a46597ec5eaa327816afe1a17cb454583820545b554230f8e39f3672a2d354edeacff498537833760469fdc69247d49e5e43c98b7f91b47ade5e4d484ce9b1497f4a3b29bd8720c8fa17109d9b926282980bcbfb2d45f5098b26851055d')
    ks_share3 = bytes.fromhex('c23cb47e5bfc7d40d0dbfe5a21ede99b371f5cfe260d16234773bb725e9b5525fba3f8ee20ee6e77a72ecf5d095e5e54fc446a4023c61536361e67d39e673b194387b68565dd8e924be82b278876b1952d314e2c4108cd5949721135fa5a3f911b70490adb78a8135884c962ad2dd969b1397ba091fa9e678a64f6e95f5e996c3cb9e15a4a93cb2f24117f9e8d67b98b2fe94f935f2fe8b498e3dd686ca499eeaaccffefb1664b9d996d40bef561069cc56d9acfd0f646476f4c7bab60a4c68e6b05242623734988d0ab9d6f0284d8d8a148e9fcaef88d70ed31705712bb33936d22ef1ffe42df1276bff5716565423180c87e538d0184f6bf2a1ecb875a636f')
    ks_shares = [ks_share1, ks_share2, ks_share3]

    streaming_ks_share1 = bytes.fromhex('654d517852a0021532c2e7a6333d678c3c3bd532bf6d9f7caa518dc2dc5e4fd65624fce36d3c346720c6f77584893bc01e8108f6dca76c8eaee18c27bb890e6ac6d16d83407cf54c54cc753fd52f7850cc689fc6f8447be41766d60bc3bf05ebe5e7b211e10062f4432d808856d539b3d495e5d6b153fd1e04919a6b1c8df16bf6c6573927675daf1e92881d3746e8f5f2b55e74bc5a24feed1ba1866346d7072f846e6eeed047b4df1bfc6a634f2f2b1cc21470ecb031c9f97fc996d6a038384d0dba89b95778e6de62223ffb3a9d55568b9b31942dd3fa2eb234bb1c12a87736dcc9fcbda08a694577e9825612c853c243a880fb053e1e63c62f865d76b8bb')
    streaming_ks_share2 = bytes.fromhex('9bcdf4ddf510bfc54ad5a3cd12077c1c708b317b4c019377bd9d1ac235f7562148a930baa7c27a4613cb558c677cead4fc358862e9a9d3cff8c189c3f85961f54e5de18538c3eca37a0e78a02091e52a9db3ef685d40ce2edf9649917f6bced0b0926ca3a01fe25dbc1ce27f8399aee6b6088c727f3bf45c580b7a664053b0ee5917097bc6b31869e9e3a28caaf79e33b0fee9abb7a0eb7f34a8b9c2c9f4045182f342ebfb6ba43e2a48c4964302bd890e67bbd843534d4030a3f1719ec25ad3a71b6cfc26317e3dfea40dede5bcf01cab9dfc4b5b7b0bcfbb88cad52d689a344dcb8a9fa1e09b369b6fa6bb100f49c2c69f41ce23cf00fe57967230f44a6469')
    streaming_ks_share3 = bytes.fromhex('aca898f776a4f5f8d382720926409c6e06c768f9b72759aeaa2d7dab083f99e0926359117d9faa65225dcf58148857f784420c086618b60b1bdc755d45ff1012e13a248b5a42e174b1f937dcf8b3b622d3f695c9e848bb8a1474558259ed4839a8aeec6a8c9d0e28d819cb762be68ae8893c71e6ff6e9518cbc7063d989dd831f10dce2022b0809ba5a62a2fee6f8480086a26cbaf87696b28774d74f8ca372a99d9cbabe17f494512cff64f91eb8d103f4f1a19a82c0c0a9e39266a475742af5fbde9335fee632c513437cf87028054f9f847e5d648539e9def87f1fdcb0c36c8a29ae3f95ab659e773a942c80285fbdc8f00578b8bc3ff5bd5b0fb4789b9dc')
    streaming_ks_shares = [streaming_ks_share1, streaming_ks_share2, streaming_ks_share3]

    with patch('mozaik_obelisk.MozaikObelisk.request_jwt_token', return_value="mocked_token"):
        task_manager1 = TaskManager(mock_app, db, Config(f'server{config_index}.toml'), Rep3AesConfig(f'rep3aes/p{config_index+1}.toml', 'rep3aes/target/release/rep3-aes-mozaik'))

    with exception_check():
        TestTaskManager.process_test(task_manager1, encrypted_key_shares[config_index], config_index, None) # Test secret shared key, no streaming

    with exception_check():
        TestTaskManager.process_test(task_manager1, ks_shares[config_index], config_index, None) # Test secret shared key schedule, no streaming
    
    with exception_check():
        TestTaskManager.process_test(task_manager1, streaming_ks_shares[config_index], config_index, [1706094000000, 1769252400000]) # Test secret shared key schedule, streaming

    with exception_check():
        response = task_manager1.run_offline()
        assert response == "OK"