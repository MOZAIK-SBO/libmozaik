#include <iostream>
#include "neural_net.h"
#include "neural_net_evaluator.h"


using namespace ckks_nn;

const double sample0[] = {
        1.0,0.7582644820213318,0.11157024651765823,0.0,0.08057851344347,0.07851240038871765,0.06611569970846176,0.04958677664399147,0.047520659863948815,0.03512396663427353,0.03099173493683338,0.02892562001943588,0.03512396663427353,0.026859503239393238,0.039256200194358826,0.03512396663427353,0.043388430029153824,0.047520659863948815,0.053719006478786475,0.053719006478786475,0.07024793326854706,0.0723140463232994,0.0847107470035553,0.09710744023323059,0.12190082669258116,0.13223139941692352,0.1694214940071106,0.1962809860706329,0.21487602591514587,0.23553718626499176,0.2541322410106659,0.26446279883384705,0.28512397408485407,0.27272728085517883,0.2665289342403412,0.23966942727565765,0.21487602591514587,0.17355372011661527,0.1570248007774353,0.12396693974733353,0.12190082669258116,0.10743801295757292,0.10537189990282057,0.09710744023323059,0.10537189990282057,0.09917355328798294,0.10537189990282057,0.09917355328798294,0.10743801295757292,0.10743801295757292,0.11570248007774352,0.11157024651765823,0.12190082669258116,0.11157024651765823,0.11983471363782883,0.11157024651765823,0.11363636702299118,0.11157024651765823,0.12190082669258116,0.10537189990282057,0.10743801295757292,0.10123966634273528,0.10123966634273528,0.08677686005830765,0.09297520667314528,0.0847107470035553,0.08264462649822235,0.07851240038871765,0.07851240038871765,0.07024793326854706,0.0764462798833847,0.06818182021379471,0.07851240038871765,0.07024793326854706,0.06818182021379471,0.06818182021379471,0.07438016682863235,0.0723140463232994,0.09090909361839294,0.10123966634273528,0.10743801295757292,0.10537189990282057,0.12190082669258116,0.11570248007774352,0.10950413346290588,0.09710744023323059,0.10330578684806824,0.09710744023323059,0.08677686005830765,0.0723140463232994,0.07024793326854706,0.053719006478786475,0.057851240038871765,0.04958677664399147,0.057851240038871765,0.05165289342403412,0.05578512325882912,0.053719006478786475,0.053719006478786475,0.0,0.012396694160997868,0.18801653385162356,0.6818181872367859,0.9752066135406494,0.6157024502754211,0.041322313249111176,0.012396694160997868,0.08677686005830765,0.06611569970846176,0.06611569970846176,0.05165289342403412,0.039256200194358826,0.043388430029153824,0.03305784985423088,0.041322313249111176,0.03512396663427353,0.04545454680919647,0.041322313249111176,0.04545454680919647,0.043388430029153824,0.04958677664399147,0.047520659863948815,0.06404958665370941,0.06818182021379471,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
};

const double sample1[] = {
        1.0,0.7589820623397827,0.473053902387619,0.193113774061203,0.1422155648469925,0.17664670944213867,0.16167664527893066,0.1422155648469925,0.121257483959198,0.10778442770242692,0.09580838680267333,0.07934131473302841,0.07634730637073517,0.06137724593281746,0.053892213851213455,0.05838323384523392,0.056886225938797,0.05988023802638054,0.07934131473302841,0.09431137889623642,0.11526945978403091,0.14970059692859647,0.17664670944213867,0.23353293538093567,0.28143712878227234,0.30838322639465326,0.351796418428421,0.378742516040802,0.3922155797481537,0.40419161319732666,0.3997006118297577,0.39520958065986633,0.38323354721069336,0.3577844202518463,0.351796418428421,0.344311386346817,0.31137725710868835,0.29191616177558893,0.27544909715652466,0.26047903299331665,0.2544910311698913,0.23802395164966583,0.2440119832754135,0.25299400091171265,0.25,0.2544910311698913,0.2634730637073517,0.26047903299331665,0.264970064163208,0.2559880316257477,0.24700598418712613,0.2559880316257477,0.24700598418712613,0.23952095210552213,0.24700598418712613,0.2440119832754135,0.2440119832754135,0.235029935836792,0.23353293538093567,0.24700598418712613,0.23952095210552213,0.2200598865747452,0.2200598865747452,0.23802395164966583,0.24550898373126984,0.23353293538093567,0.2365269511938095,0.2514970004558563,0.22455090284347531,0.20359280705451965,0.2185628712177277,0.2095808386802673,0.2065868228673935,0.20209580659866333,0.21107783913612363,0.22455090284347531,0.21107783913612363,0.1976047903299332,0.20359280705451965,0.405688613653183,0.772455096244812,0.9745509028434752,0.7365269660949707,0.3802395164966583,0.11976047605276108,0.0,0.0778443142771721,0.13173653185367584,0.11676646769046783,0.10179640352725983,0.1002994030714035,0.10179640352725983,0.09580838680267333,0.08682634681463242,0.10479041934013365,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
};


int main() {

    NeuralNet test;

    NeuralNetEvaluator evaluator;
    auto cc = evaluator.m_cc;
    auto keys = evaluator.m_key;
    std::vector<double> test_vec;
    for(int i = 0; i < 186; i++) {
        test_vec.push_back(std::round(sample1[i] * 1000) / 1000);
    }

    auto pt = cc->MakeCKKSPackedPlaintext(test_vec);

    auto ct = cc->Encrypt(keys.secretKey, pt);
    auto res = evaluator.eval_network(test, ct);

    Plaintext result;
    cc->Decrypt(keys.secretKey, res, &result);
    result->SetLength(5);
    std::cout << "Intermediate result is " << result << std::endl;

    Plaintext result;
    cc->Decrypt(keys.secretKey, res, &result);
    result->SetLength(5);
    std::cout << "Intermediate result is " << result << std::endl;

    std::cout << "Hello, World!" << std::endl;
    return 0;
}
