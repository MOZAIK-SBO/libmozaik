#include <iostream>
#include "neural_net.h"
#include "neural_net_evaluator.h"
#include <chrono>

using namespace ckks_nn;
using namespace std::chrono;

const double sample0[] = {
        1.0,0.7582644820213318,0.11157024651765823,0.0,0.08057851344347,0.07851240038871765,0.06611569970846176,0.04958677664399147,0.047520659863948815,0.03512396663427353,0.03099173493683338,0.02892562001943588,0.03512396663427353,0.026859503239393238,0.039256200194358826,0.03512396663427353,0.043388430029153824,0.047520659863948815,0.053719006478786475,0.053719006478786475,0.07024793326854706,0.0723140463232994,0.0847107470035553,0.09710744023323059,0.12190082669258116,0.13223139941692352,0.1694214940071106,0.1962809860706329,0.21487602591514587,0.23553718626499176,0.2541322410106659,0.26446279883384705,0.28512397408485407,0.27272728085517883,0.2665289342403412,0.23966942727565765,0.21487602591514587,0.17355372011661527,0.1570248007774353,0.12396693974733353,0.12190082669258116,0.10743801295757292,0.10537189990282057,0.09710744023323059,0.10537189990282057,0.09917355328798294,0.10537189990282057,0.09917355328798294,0.10743801295757292,0.10743801295757292,0.11570248007774352,0.11157024651765823,0.12190082669258116,0.11157024651765823,0.11983471363782883,0.11157024651765823,0.11363636702299118,0.11157024651765823,0.12190082669258116,0.10537189990282057,0.10743801295757292,0.10123966634273528,0.10123966634273528,0.08677686005830765,0.09297520667314528,0.0847107470035553,0.08264462649822235,0.07851240038871765,0.07851240038871765,0.07024793326854706,0.0764462798833847,0.06818182021379471,0.07851240038871765,0.07024793326854706,0.06818182021379471,0.06818182021379471,0.07438016682863235,0.0723140463232994,0.09090909361839294,0.10123966634273528,0.10743801295757292,0.10537189990282057,0.12190082669258116,0.11570248007774352,0.10950413346290588,0.09710744023323059,0.10330578684806824,0.09710744023323059,0.08677686005830765,0.0723140463232994,0.07024793326854706,0.053719006478786475,0.057851240038871765,0.04958677664399147,0.057851240038871765,0.05165289342403412,0.05578512325882912,0.053719006478786475,0.053719006478786475,0.0,0.012396694160997868,0.18801653385162356,0.6818181872367859,0.9752066135406494,0.6157024502754211,0.041322313249111176,0.012396694160997868,0.08677686005830765,0.06611569970846176,0.06611569970846176,0.05165289342403412,0.039256200194358826,0.043388430029153824,0.03305784985423088,0.041322313249111176,0.03512396663427353,0.04545454680919647,0.041322313249111176,0.04545454680919647,0.043388430029153824,0.04958677664399147,0.047520659863948815,0.06404958665370941,0.06818182021379471,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
};

const double sample1[] = {
        1.0,0.7589820623397827,0.473053902387619,0.193113774061203,0.1422155648469925,0.17664670944213867,0.16167664527893066,0.1422155648469925,0.121257483959198,0.10778442770242692,0.09580838680267333,0.07934131473302841,0.07634730637073517,0.06137724593281746,0.053892213851213455,0.05838323384523392,0.056886225938797,0.05988023802638054,0.07934131473302841,0.09431137889623642,0.11526945978403091,0.14970059692859647,0.17664670944213867,0.23353293538093567,0.28143712878227234,0.30838322639465326,0.351796418428421,0.378742516040802,0.3922155797481537,0.40419161319732666,0.3997006118297577,0.39520958065986633,0.38323354721069336,0.3577844202518463,0.351796418428421,0.344311386346817,0.31137725710868835,0.29191616177558893,0.27544909715652466,0.26047903299331665,0.2544910311698913,0.23802395164966583,0.2440119832754135,0.25299400091171265,0.25,0.2544910311698913,0.2634730637073517,0.26047903299331665,0.264970064163208,0.2559880316257477,0.24700598418712613,0.2559880316257477,0.24700598418712613,0.23952095210552213,0.24700598418712613,0.2440119832754135,0.2440119832754135,0.235029935836792,0.23353293538093567,0.24700598418712613,0.23952095210552213,0.2200598865747452,0.2200598865747452,0.23802395164966583,0.24550898373126984,0.23353293538093567,0.2365269511938095,0.2514970004558563,0.22455090284347531,0.20359280705451965,0.2185628712177277,0.2095808386802673,0.2065868228673935,0.20209580659866333,0.21107783913612363,0.22455090284347531,0.21107783913612363,0.1976047903299332,0.20359280705451965,0.405688613653183,0.772455096244812,0.9745509028434752,0.7365269660949707,0.3802395164966583,0.11976047605276108,0.0,0.0778443142771721,0.13173653185367584,0.11676646769046783,0.10179640352725983,0.1002994030714035,0.10179640352725983,0.09580838680267333,0.08682634681463242,0.10479041934013365,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
};

const double sample4[] = {
        0.97831053, 0.91095889, 0.83675802, 0.76712328, 0.67351598,
        0.57191783, 0.43721461, 0.29452056, 0.17579909, 0.11187214,
        0.09589041, 0.06621005, 0.02625571, 0.        , 0.05479452,
        0.17237443, 0.29109588, 0.3458904 , 0.38356164, 0.40525115,
        0.43835616, 0.49200913, 0.53310502, 0.58675802, 0.63812786,
        0.68493152, 0.71232879, 0.72716898, 0.74543381, 0.76027399,
        0.78196347, 0.8002283 , 0.82077628, 0.84474885, 0.86872149,
        0.89041096, 0.90981734, 0.92922372, 0.94063926, 0.94634706,
        0.9440639 , 0.94178081, 0.92465752, 0.91438359, 0.88926941,
        0.86301368, 0.83219177, 0.8002283 , 0.76826483, 0.73515981,
        0.69748861, 0.67009133, 0.64497715, 0.62671232, 0.60730594,
        0.59703195, 0.58675802, 0.57990867, 0.57648402, 0.57305938,
        0.56963468, 0.56849313, 0.56963468, 0.56849313, 0.56621003,
        0.56621003, 0.56849313, 0.56963468, 0.56849313, 0.57420093,
        0.57876712, 0.59360731, 0.60502285, 0.61757994, 0.63242006,
        0.6461187 , 0.65753424, 0.64497715, 0.63698632, 0.63926941,
        0.62899542, 0.62100458, 0.60730594, 0.59018266, 0.56963468,
        0.55365294, 0.54680365, 0.53767121, 0.53310502, 0.53196347,
        0.53424656, 0.53310502, 0.52968037, 0.53196347, 0.53082192,
        0.53196347, 0.53310502, 0.53538811, 0.53538811, 0.54337901,
        0.55251139, 0.61415523, 0.96347034, 1.        , 0.93264842,
        0.87671232, 0.82990867, 0.78538811, 0.73173517, 0.68036532,
        0.5981735 , 0.51598173, 0.42465752, 0.37557077, 0.36872146,
        0.32876712, 0.25342464, 0.1849315 , 0.20547946, 0.29109588,
        0.35730594, 0.380137  , 0.40525115, 0.42465752, 0.43036529,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.        , 0.        , 0.        , 0.        ,
        0.        , 0.
};

double CalculateApproximationError(const std::vector<std::complex<double>>& result,
                                   const std::vector<std::complex<double>>& expectedResult) {
    if (result.size() != expectedResult.size())
        OPENFHE_THROW(config_error, "Cannot compare vectors with different numbers of elements");

    // using the infinity norm
    double maxError = 0;
    for (size_t i = 0; i < result.size(); ++i) {
        double error = std::abs(result[i].real() - expectedResult[i].real());
        if (maxError < error)
            maxError = error;
    }

    return std::abs(std::log2(maxError));
}

int main() {

    NeuralNet test;

    NeuralNetEvaluator evaluator;
    auto cc = evaluator.m_cc;
    auto keys = evaluator.m_key;
    std::vector<double> test_vec(256, 0);
    for(int i = 0; i < 186; i++) {
        test_vec[i] = std::round(sample4[i] * 1000) / 1000;
    }

    Plaintext pt = cc->MakeCKKSPackedPlaintext(test_vec);
    pt->SetLength(evaluator.m_batch_size);

    auto ct = cc->Encrypt(keys.publicKey, pt);

    auto start = high_resolution_clock::now();
    auto res = evaluator.eval_network(test, ct);
    auto stop = high_resolution_clock::now();
    auto delta = duration_cast<milliseconds>(stop-start).count();

    Plaintext result;

    cc->Decrypt(keys.secretKey, res, &result);
    result->SetLength(5);
    std::cout << "Intermediate result is " << result << std::endl;

    std::cout << delta << std::endl;

    std::cout << "{ ";
    for(auto& v : evaluator.m_rot_indices) {
        std::cout << v << ", ";
    }
    std::cout << "} " << std::endl;
    return 0;
}
