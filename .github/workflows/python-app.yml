# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: MPC Webserver

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
    - name: Install firefox
      run: sudo apt install -y firefox
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r mpc/requirements.txt
    - name: Build MP-SPDZ
      run: |
        cd mpc/MP-SPDZ
        sudo apt-get install automake build-essential clang cmake git libboost-dev libboost-thread-dev libboost-filesystem-dev libboost-iostreams-dev libgmp-dev libntl-dev libsodium-dev libssl-dev libtool python3
        make malicious-rep-ring-party.x
        make Fake-Offline.x malicious-rep-ring-party.x
        ./compile.py -R64 heartbeat_inference_demo
        ./compile.py -R64 heartbeat_inference_demo_batched_2
        Scripts/setup-ssl.sh 3
    #- name: Lint with flake8
    #  run: |
    #    # stop the build if there are Python syntax errors or undefined names
    #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test
      run: |
        cd mpc && bash run_tests.sh
